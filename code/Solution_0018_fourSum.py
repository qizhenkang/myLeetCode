# import string
# import math
from typing import List
# import numpy as np


class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        """
        读题：
        1、二次读题，第一次读的时候再乱做，现在知道了，这个是所谓的回溯算法
        2、细节问题：1要求不能重复列表 
        3、有没有可能需要记忆化搜索
        
        测试：
        1、错误一次，修改了条件
        2、超时了，需要剪枝，是不是应该变成两数之和？
        3、加了一个条件，勉强通关了，性能极差 5% 5%
        4、我觉得这题挺有意思，我想再想想办法剪枝
        
        答案：
        1、本质其实就是前两个元素枚举，后两个元素双指针，我用的思路的问题在于最后两个指针
        2、最后两个指针出问题了，用的是遍历，而不是双指针/二分查找
        """
        def __dfs(result,current,nums,target,length,depth,currentSum,begin):
            print(current,depth,begin,nums[length-1], currentSum - target )
            if depth == 4:
                result.append(current)
                return
            

            for i in range(begin,length):
                # print(current)
                if (i>begin and nums[i] == nums[i-1]):
                    continue
                # if depth == 3:
                #     memo.add(tuple(current))
                # 利用排序，进行大幅度剪枝
                if currentSum + (4 - depth) * nums[i] > target:
                    break
                if currentSum + (4 - depth) * nums[length-1] < target:
                    break
                # 小于3的时候随便进，最后一个要仔细考虑
                if depth < 3 or currentSum + nums[i] == target:
                # used[i] = True
                    __dfs(result,current+[nums[i]],nums,target,length,depth+1,currentSum+ nums[i],i+1)
                # used[i] = False


                

            return
        nums.sort()
        # print(nums)
        result = []
        N = len(nums)
        # used = [False] * N
        # memo = set()
        __dfs(result,[],nums,target,N,0,0,0)
        return result
        # result = []
        # N = len(nums)
        # # 目标数 - 保证复用
        # AimNum = 4
        # if N < AimNum:
        #     return result

        # pointer = np.array([0, 1, N-2, N-1])

        # # 升序排序
        # nums.sort()
        # for p1 in range(0, N-AimNum+1):
        #     for p2 in range(p1+1, N-AimNum+2):
        #         for p3 in range(p2+1, N-AimNum+3):
        #             for p4 in range(p3+1, N-AimNum+4):
        #                 # 计算当前和
        #                 sum = nums[p1]+nums[p2]+nums[p3]+nums[p4]

        #                 if sum == target:
        #                     aimCom = [[nums[p1], nums[p2], nums[p3], nums[p4]]]
        #                     flag = 0
        #                     for re in result:
        #                         if aimCom[0] == re:
        #                             flag = 1
        #                             break
        #                     if flag == 0:
        #                         result = result + aimCom

        #                 if sum > target:
        #                     break

        #                     # result = list(set(result))
        # return result


if __name__ == '__main__':
    solu = Solution()

    input_Str = str('')
    # input_list =
    # nums = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90]
    # target = 200
    nums = [91277418,66271374,38763793,4092006,11415077,60468277,1122637,72398035,-62267800,22082642,60359529,-16540633,92671879,-64462734,-55855043,-40899846,88007957,-57387813,-49552230,-96789394,18318594,-3246760,-44346548,-21370279,42493875,25185969,83216261,-70078020,-53687927,-76072023,-65863359,-61708176,-29175835,85675811,-80575807,-92211746,44755622,-23368379,23619674,-749263,-40707953,-68966953,72694581,-52328726,-78618474,40958224,-2921736,-55902268,-74278762,63342010,29076029,58781716,56045007,-67966567,-79405127,-45778231,-47167435,1586413,-58822903,-51277270,87348634,-86955956,-47418266,74884315,-36952674,-29067969,-98812826,-44893101,-22516153,-34522513,34091871,-79583480,47562301,6154068,87601405,-48859327,-2183204,17736781,31189878,-23814871,-35880166,39204002,93248899,-42067196,-49473145,-75235452,-61923200,64824322,-88505198,20903451,-80926102,56089387,-58094433,37743524,-71480010,-14975982,19473982,47085913,-90793462,-33520678,70775566,-76347995,-16091435,94700640,17183454,85735982,90399615,-86251609,-68167910,-95327478,90586275,-99524469,16999817,27815883,-88279865,53092631,75125438,44270568,-23129316,-846252,-59608044,90938699,80923976,3534451,6218186,41256179,-9165388,-11897463,92423776,-38991231,-6082654,92275443,74040861,77457712,-80549965,-42515693,69918944,-95198414,15677446,-52451179,-50111167,-23732840,39520751,-90474508,-27860023,65164540,26582346,-20183515,99018741,-2826130,-28461563,-24759460,-83828963,-1739800,71207113,26434787,52931083,-33111208,38314304,-29429107,-5567826,-5149750,9582750,85289753,75490866,-93202942,-85974081,7365682,-42953023,21825824,68329208,-87994788,3460985,18744871,-49724457,-12982362,-47800372,39958829,-95981751,-71017359,-18397211,27941418,-34699076,74174334,96928957,44328607,49293516,-39034828,5945763,-47046163,10986423,63478877,30677010,-21202664,-86235407,3164123,8956697,-9003909,-18929014,-73824245]
    target = -236727523
    # nums = [1,-2,-5,-4,-3,3,3,5]
    # target = -11
    # nums = [1,0,-1,0,-2,2]
    # target = 0
    # nums = [2,2,2,2,2]
    # target = 8

    result = solu.fourSum(nums, target)

    # output_Str = 'result = ' + solu.intToRoman(input_int)
    output_Str = 'result = ' + str(result)
    print(output_Str)
